#1
# def greet_by_name(name):
#     print(f"–°–∞–π–Ω —É—É, {name}!")
# greet_by_name("–î–æ—Ä–∂")
# greet_by_name("–°–∞—Ä–∞–∞")    

#2
# def add_two_numbers(num1, num2):
#     sum = num1 + num2
#     print(f"{num1} + {num2} = {sum}")
    

# add_two_numbers(10, 25)  
# add_two_numbers(100, -50) 

#3
# def print_fav_color(color):
#     print(f"–ú–∏–Ω–∏–π –¥—É—Ä—Ç–∞–π ”©–Ω–≥”© –±–æ–ª {color}")
# print_fav_color("—Ü—ç–Ω—Ö—ç—Ä")  

#4
# def calculate_area(length, width):
#     square = length * width
#     print(f"–£—Ä—Ç={length}, ”®—Ä–≥”©–Ω={width} “Ø–µ–¥ —Ç–∞–ª–±–∞–π –Ω—å {square} –±–∞–π–Ω–∞.")
# calculate_area(10, 5)    

#5
# def repeat_message(message, time):
#     for i in range(3):
#         print(f"Python –±–æ–ª —Å–æ–Ω–∏—Ä—Ö–æ–ª—Ç–æ–π!")
# repeat_message("Python –±–æ–ª —Å–æ–Ω–∏—Ä—Ö–æ–ª—Ç–æ–π!", 3)     

#6
# def describe_pet(name, animal_type):
#     print(f"–ú–∏–Ω–∏–π {animal_type}-–≥ {name} –≥—ç–¥—ç–≥")
# describe_pet("–ë–∞–Ω—Ö–∞—Ä", "–Ω–æ—Ö–æ–π")    

#7
# def print_address(city, district, street):
#     print("--- –•–∞—è–≥ ---")
#     print(f"""
# –•–æ—Ç: {city}
# –î“Ø“Ø—Ä—ç–≥: {district}
# –ì—É–¥–∞–º–∂: {street}
# """)
# print_address("–£–ª–∞–∞–Ω–±–∞–∞—Ç–∞—Ä", "–ë–∞—è–Ω–∑“Ø—Ä—Ö", "–ì–∞—á—É—É—Ä—Ç")    

#8
# def show_multiplication_table(number):
#     print("--- 9-–∏–π–Ω —Ö“Ø—Ä–¥ –Ω—å ---")
#     for i in range(1, 11):
#         print(f"{number} * {i} = {number * i}")
# show_multiplication_table(9)

#9
# def check_even_odd(number):
#     if number % 2 == 0:
#         print(f"{number} –±–æ–ª —Ç—ç–≥—à —Ç–æ–æ.")
#     else:
#         print(f"{number} –±–æ–ª —Å–æ–Ω–¥–≥–æ–π —Ç–æ–æ.")
# check_even_odd(10)
# check_even_odd(17)  

#10
# def draw_line(length, character):
    
#     print(f"{character * length}")
# draw_line(5, "a")    
# draw_line(20, "*")    

#11
# def check_password(password_attempt):
#     correct_password = "python123"
#     if password_attempt == correct_password:
#         print("–ù—É—É—Ü “Ø–≥ –∑”©–≤ –±–∞–π–Ω–∞. –ù—ç–≤—Ç—Ä—ç—Ö —ç—Ä—Ö –æ–ª–≥–æ–≥–¥–ª–æ–æ.")
#     else:
#         print("–ù—É—É—Ü “Ø–≥ –±—É—Ä—É—É –±–∞–π–Ω–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É.")
# check_password("python222")
# check_password("python123")  

#12
# def print_list_items(my_list):
#     for i, item in enumerate(my_list, 1):
#         print(f"{i}. {item}")
# #     counter = 1
    
# #     for fruit in my_list:
# #         print(f"{counter}. {fruit}")
# #         counter = counter + 1

# fruits = ["–ê–ª–∏–º", "–ë–∞–Ω–∞–Ω–∞", "–ñ“Ø—Ä–∂"]

# print_list_items(fruits)                (## –±–∞ # –Ω—å —Ö–æ—ë—Ä —Ç—É—Å–¥–∞–∞ –∞—Ä–≥–∞)

#13
# def calculate_discount(price, percentage):
#     percentage = percentage * price / 100
#     total = price - percentage
#     print(f"–ê–Ω—Ö–Ω—ã “Ø–Ω—ç: {price}, –•—è–º–¥—Ä–∞–ª –Ω—å: {percentage}, –≠—Ü—Å–∏–π–Ω –¥“Ø–Ω: {total}")

# calculate_discount(50000, 10)

#14
# def check_age_group(age):
#     if age < 18:
#         print(f"{age} –Ω–∞—Å –±–æ–ª '”®—Å–≤”©—Ä –Ω–∞—Å–Ω—ã' –∞–Ω–≥–∏–ª–∞–ª–¥ –±–∞–≥—Ç–∞–Ω–∞.")
#     elif age < 65:
#         print(f"{age} –Ω–∞—Å –±–æ–ª '–ù–∞—Å–∞–Ω–¥ —Ö“Ø—Ä—Å—ç–Ω' –∞–Ω–≥–∏–ª–∞–ª–¥ –±–∞–≥—Ç–∞–Ω–∞.")
#     else:
#         print(f"{age} –Ω–∞—Å –±–æ–ª '–ê—Ö–º–∞–¥ –Ω–∞—Å—Ç–∞–Ω' –∞–Ω–≥–∏–ª–∞–ª–¥ –±–∞–≥—Ç–∞–Ω–∞.")      

# # check_age_group(15)    
# # check_age_group(30)   
# check_age_group(70)   

#15
# import time
# def countdown_from(start_number):
#     print(f"{start_number}-—Å —Ç–æ–æ–ª–∂ —ç—Ö—ç–ª–ª—ç—ç...")
#     for i in range(start_number, 0, -1):
#         print(i)
#         time.sleep(1)
#     print("–•”©”©—Ä–ª”©”©! üöÄüöÄüöÄ")

# countdown_from(10)

#16
# def draw_rectangle(width, height, character):
#     for _ in range(height):
#         print(character * width)

# draw_rectangle(10, 4, "#")  

#17
# def draw_pyramid(heigh):
#     for i in range(1, heigh, + 1):
#         spaces = " " * (heigh - i)
#         stars = "*" * (2 * i - 1)
#         print(spaces + stars)

# draw_pyramid(6)

#18
# def convert_grade_to_letter(score):
#     if score >= 90:
#         print(f"{score} –±–æ–ª 'A' “Ø–Ω—ç–ª–≥—ç—ç —é–º.")
#     elif score >= 80:
#         print(f"{score} –±–æ–ª 'B' “Ø–Ω—ç–ª–≥—ç—ç —é–º.")    
#     elif score >= 70:
#         print(f"{score} –±–æ–ª 'C' “Ø–Ω—ç–ª–≥—ç—ç —é–º.")
#     elif score >= 60:
#         print(f"{score} –±–æ–ª 'D' “Ø–Ω—ç–ª–≥—ç—ç —é–º.")
#     else:
#         print(f"{score} –±–æ–ª 'F' “Ø–Ω—ç–ª–≥—ç—ç —é–º.")

# convert_grade_to_letter(60)
# convert_grade_to_letter(99)
# convert_grade_to_letter(43)
# convert_grade_to_letter(84)
# convert_grade_to_letter(72)

#19
# def convert_celsius_to_fahrenheit(celsius):
#     C = celsius

#     F = C * 1.8 + 32
#     print(f"{celsius} –Ω—å {F}-—Ç—ç–π —Ç—ç–Ω—Ü“Ø“Ø.")

# convert_celsius_to_fahrenheit(30)    

#20
# import math
# def check_if_prime(n):
#     if n <= 1:
#         return False
#     # print(f"{n} –±–æ–ª –∞–Ω—Ö–Ω—ã —Ç–æ–æ –±–∏—à.")
#     for i in range(2, int(math.sqrt(n)) + 1):
#         if n % i == 0:
#             return False
#     return True
#     # print(f"{n} –±–æ–ª –∞–Ω—Ö–Ω—ã —Ç–æ–æ –º”©–Ω.")
# print(check_if_prime(7))
# print(check_if_prime(10))

#21
# def fizz_buzz(limit):
#     for i in range(1, limit + 1):
#         if i % 3 == 0:
#             print("Fizz")
#         elif i % 5 == 0:
#             print("Buzz")
#         elif i % 3 and 5 == 0:
#             print("FizzBuzz")
#         else:
#             print(i)    

# fizz_buzz(15) 

#22
# def check_password_strength(password):
#     if len(password) < 8:
#         print("–°—É–ª")
#     elif password.isalpha() or password.isdigit():
#         print("–î—É–Ω–¥")
#     elif any(ch.isalpha() for ch in password) and any(ch.isdigit() for ch in password):
#         print("–•“Ø—á—Ç—ç–π")
#     else:
#         print("–ú–∞—à —Ö“Ø—á—Ç—ç–π")

# check_password_strength("12345")
# check_password_strength("abcdefghi")
# check_password_strength("password123")


#23
# def find_common_elements(list1, list2):
#     common = []
#     for i in list1:
#         if i in list2:
#             common.append(i)
#     return common        

# print(find_common_elements([1, 2, 3, 4], [3, 4, 5, 6]))

#24
# def draw_hollow_rectangle(width, height, character):
#     for i in range(height):
#         if i == 0 or i == height - 1:
#             print(character * width)
#         else:
#             print(character + " " * (width - 2) + character)

# draw_hollow_rectangle(12, 5, "*")

#25
# def encrypt_caesar(message, shift):
#     result = ""
#     for ch in message:
#         if ch.isalpha():
#             base = ord('A') if ch.isupper() else ord('a')
#             result += chr((ord(ch) - base + shift) % 26 + base)
#         else:
#             result += ch
#     print(f"–ê–Ω—Ö–Ω—ã –º–µ—Å—Å–µ–∂: '{message}', –®–∏—Ñ—Ä–ª—ç—Å—ç–Ω “Ø—Ä –¥“Ø–Ω: '{result}'")

# encrypt_caesar("hello world", 3)


